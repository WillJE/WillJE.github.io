<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on will&#39;s blog</title>
    <link>https://willje.github.io/tags/docker/</link>
    <description>Recent content in docker on will&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 will 和出处链接。</copyright>
    <lastBuildDate>Tue, 24 Aug 2021 21:51:51 +0800</lastBuildDate><atom:link href="https://willje.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Docker安装GitLab</title>
      <link>https://willje.github.io/posts/docker/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85gitlab/</link>
      <pubDate>Tue, 24 Aug 2021 21:51:51 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/docker/%E4%BD%BF%E7%94%A8docker%E5%AE%89%E8%A3%85gitlab/</guid>
      <description>安装GitLab gitlab 镜像分为两个版本： gitlab-ce 社区版 gitlab-ee 企业收费版 这里使用社区版则可，直接安装官方镜像，目前(2020/1/14)官方镜像大小约1.8G，如果你没有设置Docker镜像源，Docker会默认从国外Docker官方Hub去拉去进行，速度难以让人接受，参考「Centos7安装docker-ce」一文进行设置。 拉取gitlab-ce源 docker pull gitlab/gitlab-ce:latest 运行Gitlab 下</description>
    </item>
    
    <item>
      <title>docker网络</title>
      <link>https://willje.github.io/posts/docker/docker%E7%BD%91%E7%BB%9C/</link>
      <pubDate>Mon, 23 Aug 2021 21:51:51 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/docker/docker%E7%BD%91%E7%BB%9C/</guid>
      <description>安装Docker时，它会自动创建三个网络，bridge（创建容器默认连接到此网络）、 none 、host 网络模式 简介 Host 容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。 Bridge 此模式会为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，通过docker0网桥以及Iptables nat表配置与宿主机通信。 None 该模式关闭了容器的网络功</description>
    </item>
    
    <item>
      <title>Win10安装docker</title>
      <link>https://willje.github.io/posts/docker/win10%E5%AE%89%E8%A3%85docker/</link>
      <pubDate>Tue, 20 Apr 2021 21:51:51 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/docker/win10%E5%AE%89%E8%A3%85docker/</guid>
      <description>安装 主要是安装docker和wsl，先去docker官网 下载安装包，注意查看系统要求，虚拟化和安装WSL（Windows Subsystem for Linux） 。 具体可以看这个中文的：wsl官方文档 。 主要的坑在Bios启用虚拟化：3700x启用虚拟化： 看virtualisation：enabled状态 配置镜像加速 具体看这里镜像加速器 ，对于使用 Windows 10 的用户，在任务栏托盘 Docker 图标内右键菜单</description>
    </item>
    
    <item>
      <title>Docker基础概念</title>
      <link>https://willje.github.io/posts/docker/docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Sat, 05 Dec 2020 12:43:20 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/docker/docker%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</guid>
      <description>b站教程：https://www.bilibili.com/video/BV1og4y1q7M4? 【这个教程非常简洁！且深入！基于企业应用场景！推荐！以下笔记都基于该课程】 【配套笔记：https://gitee.com/nasheishei/docker_learning/blob/master/Docker.md】 什么是docker Docker 使用 Google 公司推出的 Go 语言</description>
    </item>
    
    <item>
      <title>Docker容器原理</title>
      <link>https://willje.github.io/posts/docker/%E5%AE%B9%E5%99%A8%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 18 Nov 2020 21:23:18 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/docker/%E5%AE%B9%E5%99%A8%E5%8E%9F%E7%90%86/</guid>
      <description>容器 容器其实是一种沙盒技术。顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了边界而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬来搬去。 那么，这个边界怎么产生的呢？对于Docker项目来说它最核心的原理实际上就是为待创建的用户进程： 启用 Linux Namespace 配置； 设置指定的 Cgroups 参数； 切换进程的根目录（Change Roo</description>
    </item>
    
  </channel>
</rss>
