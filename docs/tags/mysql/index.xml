<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on will&#39;s blog</title>
    <link>https://willje.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on will&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 will 和出处链接。</copyright>
    <lastBuildDate>Sat, 25 Apr 2020 22:34:22 +0800</lastBuildDate><atom:link href="https://willje.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL_MVCC机制</title>
      <link>https://willje.github.io/posts/mysql/mysql-mvcc%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sat, 25 Apr 2020 22:34:22 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/mysql/mysql-mvcc%E6%9C%BA%E5%88%B6/</guid>
      <description>本文中用到的概念解释 数据读取特性 不可重复读 指一个事务范围内两个相同的查询却返回了不同数据 这是由于查询时系统中其他事务修改的提交而引起的 幻读 在两个连续的查找之间一个并发的修改事务修改了查询的数据集，导致这两个查询返回了不同的结果 这是由于查询时系统中其他事务新增或者删除记录引起的 事务隔离级别 Read Commited(提交读) 一个事务从开始到提交前,所作的任何修改对其他</description>
    </item>
    
    <item>
      <title>MySQL InnoDB锁机制</title>
      <link>https://willje.github.io/posts/mysql/mysql-innodb%E9%94%81%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Thu, 23 Apr 2020 21:23:18 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/mysql/mysql-innodb%E9%94%81%E6%9C%BA%E5%88%B6/</guid>
      <description>锁 锁是用于管理不同事务对共享资源的并发访问 表锁和行锁的区别： 在加锁效率、锁定粒度以及冲突概率上，表锁肯定是大于行锁的 但是在并发性能上，表锁远低于行锁。 表锁是锁定了整个表，在加锁期间，无论读写，这个表的数据都是锁定的，相反行锁只是锁定了这个表中的一条数据，其他数据仍然可以操作，这就可很好的提高了数据库的并发性能。 关于表级锁 LOCK TABLES [&amp;lt;tb&amp;gt; &amp;lt;lock_type&amp;gt;],... -- 给指定表加锁，使当前客户端会</description>
    </item>
    
    <item>
      <title>MySQL什么情况下会造成索引失效</title>
      <link>https://willje.github.io/posts/mysql/mysql%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E9%80%A0%E6%88%90%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/</link>
      <pubDate>Thu, 16 Apr 2020 14:48:19 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/mysql/mysql%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E9%80%A0%E6%88%90%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/</guid>
      <description>一、准备工作，准备sql 这里我使用的mysql版本是 8.0.19。 CREATE TABLE `student` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(20), `age` int(11), `address` varchar(25), `crtdate` timestamp, PRIMARY KEY (`id`) USING BTREE ); insert into student(name,age,address,crtdate) values(&amp;#39;张三&amp;#39;, 15, &amp;#39;山东青岛&amp;#39;, now()); insert into student(name,age,address,crtdate) values(&amp;#39;李四&amp;#39;, 17, &amp;#39;山东济南&amp;#39;, now()); insert into student(name,age,address,crtdate) values(&amp;#39;王五&amp;#39;, 18, &amp;#39;山东潍坊&amp;#39;, now()); -- 创建复</description>
    </item>
    
    <item>
      <title>MySQL中的索引和Explain的用法</title>
      <link>https://willje.github.io/posts/mysql/mysql%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8Cexplain%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 11 Apr 2020 11:20:54 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/mysql/mysql%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E5%92%8Cexplain%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>写在前面 日常开发中，当数据体量比较大的时候可能就会遇到慢SQL的问题，找出这些SQL并解决，就会用到explain这个命令来查看一个这些SQL语句的执行计划，看下该命令有没有做全表扫描，有没有走索引，这些都可以通过explain命令来查看。 性能下降原因 执行时间长；等待时间长 查询语句写的差（自身问题）； 索引失效（单值索引或复合索引失效）； 关联查询太多join（</description>
    </item>
    
    <item>
      <title>MySQL事务隔离级别</title>
      <link>https://willje.github.io/posts/mysql/mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</link>
      <pubDate>Thu, 09 Apr 2020 19:46:38 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/mysql/mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</guid>
      <description>MySQL事务隔离级别 什么是事务？ 数据库操作的最小工作单元，是作为单个逻辑工作单元执行的一系列操作；事务是一组不可再分割的操作集合（工作逻辑单元） 举个栗子： 事务最经典常用的栗子可能就是转账：一个账户少钱了，哪另一个账户肯定要多钱，李永龙说过，亏本的买卖咱可不干，吃亏了不高兴！ 所以，少钱和多钱这两个操作，要么同时成功，要么同时失败！ MySQL中如何开启事务？ 手</description>
    </item>
    
    <item>
      <title>MySQL B-Tree和B&#43;tree</title>
      <link>https://willje.github.io/posts/mysql/mysql-b-tree%E5%92%8Cb&#43;tree/</link>
      <pubDate>Thu, 02 Apr 2020 20:55:29 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/mysql/mysql-b-tree%E5%92%8Cb&#43;tree/</guid>
      <description>B+树索引是B+树在数据库中的一种实现，是最常见也是数据库中使用最为频繁的一种索引。 B+树中的B代表平衡（balance），而不是二叉（binary），因为B+树是从最早的平衡二叉树演化而来的。 在讲B+树之前必须先了解二叉查找树、平衡二叉树（AVLTree）和平衡多路查找树（B-Tree），B+树即由这些树逐步优化而来。 二叉查找树 定义 二叉树具有以下性质： 左子</description>
    </item>
    
  </channel>
</rss>
