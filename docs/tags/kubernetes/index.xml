<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on will&#39;s blog</title>
    <link>https://willje.github.io/tags/kubernetes/</link>
    <description>Recent content in Kubernetes on will&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>本文采用知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议进行许可，转载请注明 will 和出处链接。</copyright>
    <lastBuildDate>Tue, 23 Nov 2021 21:23:18 +0800</lastBuildDate><atom:link href="https://willje.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kubernetes 集群里的三种IP</title>
      <link>https://willje.github.io/posts/k8s/k8s-%E9%9B%86%E7%BE%A4%E9%87%8C%E7%9A%84%E4%B8%89%E7%A7%8Dipnodeippodipclusterip/</link>
      <pubDate>Tue, 23 Nov 2021 21:23:18 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/k8s/k8s-%E9%9B%86%E7%BE%A4%E9%87%8C%E7%9A%84%E4%B8%89%E7%A7%8Dipnodeippodipclusterip/</guid>
      <description>Kubernetes集群里有三种IP地址，分别如下： Node IP：Node节点的IP地址，即物理网卡的IP地址。 Pod IP：Pod的IP地址，即docker容器的IP地址，此为虚拟IP地址。 Cluster IP：Service的IP地址，此为虚拟IP地址。 Node IP 可以是物理机的IP（也可能是虚拟机IP）。每个Service都会在Node节点上开通一个端口，外部可以通过NodeIP:No</description>
    </item>
    
    <item>
      <title>Kubelet实现原理</title>
      <link>https://willje.github.io/posts/k8s/kubelet%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sun, 29 Aug 2021 21:23:18 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/k8s/kubelet%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>kubelet 主要功能 在kubernetes集群中，每个Node节点都会启动kubelet进程，用来处理Master节点下发到本节点的任务，管理Pod和其中的容器。 pod 管理 Kubelet 以 PodSpec 的方式工作。PodSpec 是描述一个 Pod 的 YAML 或 JSON 对象。 kubelet 采用一组通过各种机制提供的 PodSpecs（主要通过 apiserver），并确保这些 PodSpecs 中描述的 Pod 正常健康运行。 官方提供了4中方式来获取容器信息</description>
    </item>
    
    <item>
      <title>Kubernetes port类型</title>
      <link>https://willje.github.io/posts/k8s/kubernetes-port%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 23 Aug 2021 21:23:18 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/k8s/kubernetes-port%E7%B1%BB%E5%9E%8B/</guid>
      <description>k8s有几种port类型，分别是TargetPort，ContainerPort，NodePort，Port，那么该怎么区别她们呢，各自的使用场景又是什么呢，接下来这篇文章给你分析一下。 ContainerPort ContainerPort表示你使用的镜像需要开放的端口。例如，mysql 服务需要暴露 3306 端口，redis 暴露 6379 端口 apiVersion:v1kind:ReplicationControllermetadata:name:redis-masterlabels:name:redis-masterspec:replicas:1selector:name:redis-mastertemplate:metadata:labels:name:redis-masterspec:containers:- name:masterimage:kubeguide/redis-masterports:- containerPort:6379# 此处定义暴露的端口NodePort 一旦你的pod创建</description>
    </item>
    
    <item>
      <title>k8s入门</title>
      <link>https://willje.github.io/posts/k8s/k8s%E5%85%A5%E9%97%A8/</link>
      <pubDate>Fri, 23 Jul 2021 21:23:18 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/k8s/k8s%E5%85%A5%E9%97%A8/</guid>
      <description>创建namespace Kubernetes namespace 是用来构建虚拟的资源池；使用 kubernetes namespace，管理员可以将 kubernetes 划分成多个虚拟的区域，不同的项目或者团队可以使用不同的 namespace，达到了共享 kubernetes 集群资源的目的。此外， namespace 也被用来划分命名空间，即不同 namespace 里的资源可以取相同的名字，相同 namespace 内的资源不能重名。 Namespaces 通过 kubectl create -f，我们可以轻松地创建一个 namespace： ns.yaml文件如下</description>
    </item>
    
    <item>
      <title>k8s鉴权</title>
      <link>https://willje.github.io/posts/k8s/k8s%E9%89%B4%E6%9D%83/</link>
      <pubDate>Sun, 25 Apr 2021 21:23:18 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/k8s/k8s%E9%89%B4%E6%9D%83/</guid>
      <description>在k8s中，客户端对API Server访问的大体流程如下： 用户简介 在k8s中，用户具有如下基础属性： 用户名：标识用户的字符串 UID：标识用户的数字 组：即用户组，包含若干个用户 额外字段：其他信息 看起来和Linux中的系统用户一模一样。。。不过基本上只需要关心用户名。 用户分类 在Kubernetes中，用户分为两类： 普通用户（normal user）：为Pod外的程</description>
    </item>
    
    <item>
      <title>Win10使用wsl部署k8s环境</title>
      <link>https://willje.github.io/posts/docker/win10%E4%BD%BF%E7%94%A8wsl%E9%83%A8%E7%BD%B2k8s%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 24 Apr 2021 21:57:01 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/docker/win10%E4%BD%BF%E7%94%A8wsl%E9%83%A8%E7%BD%B2k8s%E7%8E%AF%E5%A2%83/</guid>
      <description>前提 安装docker和go环境 配置wsl2 这个可以看之前的文章win10安装docker 安装kubectl 安装kubectl有几种方法，具体可以看install-kubectl-windows/ 直接使用curl curl -LO https://dl.k8s.io/release/v1.21.0/bin/windows/amd64/kubectl.exe 如果提示curl命令不存在，可以先安装一下curl，不过这里建议直接用github的curl（如果你安装了github的话），目录在github</description>
    </item>
    
    <item>
      <title>k8s概述</title>
      <link>https://willje.github.io/posts/k8s/k8s%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Thu, 01 Apr 2021 16:23:40 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/k8s/k8s%E6%A6%82%E8%BF%B0/</guid>
      <description>集群架构与组件 Kubernetes 集群架构以及相关的核心组件如下图所示：一个 Kubernetes 集群一般包含一个 Master 节点和多个 Node 节点，一个节点可以看成是一台物理机或虚拟机。 Master Master 是 K8S 的集群控制节点，每个 K8S 集群里需要有一个 Master 节点来负责整个集群的管理和控制，基本上 K8S 所有的控制命令都是发给它，它来负责具体的执行过程。Master 节点通常会占据一个独立的服务器，因为它太重要了，如果它不可用，那么所有的控制</description>
    </item>
    
    <item>
      <title>k8s入门2</title>
      <link>https://willje.github.io/posts/k8s/k8s%E5%85%A5%E9%97%A82/</link>
      <pubDate>Sat, 25 Jul 2020 21:23:18 +0800</pubDate>
      
      <guid>https://willje.github.io/posts/k8s/k8s%E5%85%A5%E9%97%A82/</guid>
      <description>Kubernetes Job Using Job Kubernetes Job 通过创建 Pod 来批量执行一次性任务；不同于单独跑一个 Bare Pod，由 Job 运行起来的 Pod 在机器故障等问题下会重新调度 Pod，因此更加健壮。 下面，我们通过创建一个 Pod 来感受一下 Job 的使用： $ kubectl create -f resources/job.yaml job &amp;#34;pi&amp;#34; created $ kubectl get job NAME COMPLETIONS DURATION AGE pi 1/5 29s 29s $ kubectl get pods -l job-name=pi NAME READY STATUS RESTARTS AGE pi-76h5p 1/1 Running 0 12s pi-fhww6 0/1 Completed 0 36s 这是job.yaml apiVersion:batch/v1kind:Jobmetadata:name:pispec:completions:5template:metadata:name:pispec:containers:- name:piimage:cargo.caicloud.io/caicloud/perl:latestcommand:[&amp;#34;perl&amp;#34;,&amp;#34;-Mbignum=bpi&amp;#34;,&amp;#34;-wle&amp;#34;,&amp;#34;print bpi(2000)&amp;#34;]restartPolicy:Never一段时</description>
    </item>
    
  </channel>
</rss>
